### Variables - Adjust if needed
@baseUrl = http://localhost:8080

# --- Users involved ---
# Student making the booking (Tech Club POC)
@studentEmail = poc.student1@example.com
@studentPassword = studentpass1

# Approver: Floor Manager for AB1/101
@floorManagerEmail = floor.manager1@example.com
@floorManagerPassword = managerpass1

# Approver: Club's Faculty Head (Tech Club)
@clubFacultyHeadEmail = faculty.head1@example.com
@clubFacultyHeadPassword = profpass1

# Approver: Cultural Professor (Any)
@culturalProfEmail = faculty.head2@example.com
@culturalProfPassword = profpass2

# Approver: Student Council Member
@scMemberEmail = sc.member1.example.com
@scMemberPassword = scpass1

# Approver: Security Member
@securityEmail = security1@example.com
@securityPassword = securitypass1

# --- Booking Details ---
@bookingBlock = AB1
@bookingRoom = 101
# Use a unique future timestamp for the booking
@bookingStartTime = 2025-11-15T14:00:00 // Example start time
@bookingEndTime = 2025-11-15T16:00:00   // Example end time

@bookingClub = Tech Club
@bookingPurpose = Tech Club - Project Meeting

### 1. Login Student (poc.student1)
# @name loginStudent
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{studentEmail}}",
  "password": "{{studentPassword}}"
}
### Store Token
@studentToken = {{loginStudent.response.body.jwt}}

### 2. Login Floor Manager (floor.manager1)
# @name loginFloorManager
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{floorManagerEmail}}",
  "password": "{{floorManagerPassword}}"
}
### Store Token
@floorManagerToken = {{loginFloorManager.response.body.jwt}}

### 3. Login Club Faculty Head (faculty.head1)
# @name loginClubFacultyHead
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{clubFacultyHeadEmail}}",
  "password": "{{clubFacultyHeadPassword}}"
}
### Store Token
@clubFacultyHeadToken = {{loginClubFacultyHead.response.body.jwt}}

### 4. Login Cultural Professor (faculty.head2)
# @name loginCulturalProf
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{culturalProfEmail}}",
  "password": "{{culturalProfPassword}}"
}
### Store Token
@culturalProfToken = {{loginCulturalProf.response.body.jwt}}

### 5. Login Student Council Member (sc.member1)
# @name loginScMember
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{scMemberEmail}}",
  "password": "{{scMemberPassword}}"
}
### Store Token
@scMemberToken = {{loginScMember.response.body.jwt}}

### 6. Login Security Member (security1)
# @name loginSecurity
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "{{securityEmail}}",
  "password": "{{securityPassword}}"
}
### Store Token
@securityToken = {{loginSecurity.response.body.jwt}}


### 7. Create Booking Request (as Student)
# @name createBooking
POST {{baseUrl}}/api/bookings
Authorization: Bearer {{studentToken}}
Content-Type: application/json

{
  "block": "{{bookingBlock}}",
  "roomNo": "{{bookingRoom}}",
  "startTime": "{{bookingStartTime}}", // Changed
  "endTime": "{{bookingEndTime}}",   // Added
  "purpose": "{{bookingPurpose}}",
  "studentEmail": "{{studentEmail}}",
  "clubName": "{{bookingClub}}"
}
# --- Check the response here, initial status should be PENDING ---


### 8. Submit Approval - Floor Manager (floor.manager1)
# @name approveByFloorManager
POST {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}/approvals
Authorization: Bearer {{floorManagerToken}}
Content-Type: application/json

{
  "approverEmail": "{{floorManagerEmail}}",
  "status": "APPROVED",
  "comments": "Approved by Floor Manager"
}


### 9. Submit Approval - Club Faculty Head (faculty.head1)
# @name approveByClubFacultyHead
POST {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}/approvals
Authorization: Bearer {{clubFacultyHeadToken}}
Content-Type: application/json

{
  "approverEmail": "{{clubFacultyHeadEmail}}",
  "status": "APPROVED",
  "comments": "Approved by Club Faculty Head"
}


### 10. Submit Approval - Cultural Professor (faculty.head2)
# @name approveByCulturalProf
POST {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}/approvals
Authorization: Bearer {{culturalProfToken}}
Content-Type: application/json

{
  "approverEmail": "{{culturalProfEmail}}",
  "status": "APPROVED",
  "comments": "Approved by Cultural Professor"
}


### 11. Submit Approval - Student Council (sc.member1)
# @name approveByScMember
POST {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}/approvals
Authorization: Bearer {{scMemberToken}}
Content-Type: application/json

{
  "approverEmail": "{{scMemberEmail}}",
  "status": "APPROVED",
  "comments": "Approved by Student Council"
}


### 12. Submit Approval - Security (security1)
# @name approveBySecurity
POST {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}/approvals
Authorization: Bearer {{securityToken}}
Content-Type: application/json

{
  "approverEmail": "{{securityEmail}}",
  "status": "APPROVED",
  "comments": "Approved by Security"
}
# --- After this final approval, the booking's overallStatus should change to APPROVED ---


### 13. Verify Final Booking Status (as Student)
# Check if overallStatus is "APPROVED" in the response body
# @name verifyBooking
GET {{baseUrl}}/api/bookings/{{bookingBlock}}/{{bookingRoom}}/{{bookingStartTime}}
Authorization: Bearer {{studentToken}}

